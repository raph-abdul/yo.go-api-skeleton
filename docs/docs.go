// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns access/refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful, tokens provided\" // Corrected: Matches code returning wrapped response.LoginResponse",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/youGo_internal_api_response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/youGo_internal_api_response.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data (validation error)\" // Note: Code returns 422 for validation",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Details",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_request.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully\" // Correct: Matches code returning wrapped response.UserResponse (assuming registerResp is compatible)",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/youGo_internal_api_response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/youGo_internal_api_response.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data (validation error)",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User with this email already exists",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds a new user to the system. Typically used by administrators.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User details for creation",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_request.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully\"       // UPDATED: Reference response DTO",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data\"             // UPDATED: Reference response DTO",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User conflict (e.g., email exists)\" // UPDATED: Reference response DTO",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error\"          // UPDATED: Reference response DTO",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves details for a specific user by their ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details found\"      // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid User ID format\" // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found\"         // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error\"  // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates details for an existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_request.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully\"    // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data or User ID format\" // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found\"              // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error\"       // Corrected: domain. prefix",
                        "schema": {
                            "$ref": "#/definitions/youGo_internal_api_response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "youGo_internal_api_request.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "youGo_internal_api_request.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "description": "Example: require password, min 8 chars",
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "youGo_internal_api_request.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "youGo_internal_api_response.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Optional: Detailed error info (e.g., validation failures)"
                },
                "message": {
                    "description": "User-friendly error message",
                    "type": "string"
                },
                "status": {
                    "description": "Typically \"error\" or \"fail\" (for validation)",
                    "type": "string"
                }
            }
        },
        "youGo_internal_api_response.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Tokens for accessing protected resources",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token might be handled differently (e.g., httpOnly cookie) or omitted sometimes",
                    "type": "string"
                },
                "token_type": {
                    "description": "Typically \"Bearer\"",
                    "type": "string"
                },
                "user": {
                    "description": "Optionally embed the full UserResponse DTO",
                    "allOf": [
                        {
                            "$ref": "#/definitions/youGo_internal_api_response.UserResponse"
                        }
                    ]
                }
            }
        },
        "youGo_internal_api_response.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Holds the actual response DTO (e.g., UserResponse, LoginResponse)"
                },
                "status": {
                    "description": "Typically \"success\"",
                    "type": "string"
                }
            }
        },
        "youGo_internal_api_response.UserResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "String for JSON compatibility",
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "youGo",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
